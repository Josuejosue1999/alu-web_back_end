#!/usr/bin/env python3
"""
This module defines a coroutine `async_comprehension` that collects
random numbers generated by `async_generator` using asynchronous comprehension.
"""

from typing import List
import importlib.util
import sys

# Dynamically load the module
module_name = '0-async_generator'
module_path = f'./{module_name}.py'
spec = importlib.util.spec_from_file_location(module_name, module_path)
async_generator_module = importlib.util.module_from_spec(spec)
sys.modules[module_name] = async_generator_module
spec.loader.exec_module(async_generator_module)

# Import the function
async_generator = async_generator_module.async_generator


async def async_comprehension() -> List[float]:
    """
    Coroutine that collects 10 random numbers generated by `async_generator`
    using asynchronous comprehension and returns the list of numbers.
    Returns:
        List[float]: A list of 10 random numbers.
    """
    # Collecting numbers using asynchronous comprehension
    numbers = [number async for number in async_generator()]
    return numbers
